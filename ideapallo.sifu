ideapallo project[
  url www.ideapallo.com
  namespace com.ideapallo
](

  #SERVER
  ideapallo server[
    template java-springboot
    developer (akis)
    default model type mysql
    file storage fs
    security(
      principal Account 
#      permission  // I have no idea what permission actually does and how to make use of it.
      role AccountTypes 
      defaultRole CLIENT
      adminRole ADMIN
      signIn[query findUserWithStuff, response(Account, Idealist)]
      type (email, facebook)
    )
  ](


    #ENUMS
    AccountTypes enum( ADMIN, CLIENT)

    Tag model(
      name text
      findIdeaByTag find from Idea left join Tag  on Idea.tags where Tag.name == name
    )

    #MODEL
    Account model (
      findUserWithStuff find from Account join Idealist on Idealist.account where Account.id == id
      username optional text[min 4, max 40]
    )

    Idealist model(
      account Account[oneToOne]
    )

    Idea model(
      title text
      content text
      idealist list Idealist[manyToMany]
      tags list Tag [manyToMany]

      byId find from Idea where Idea.id == id
      findByIdealist find from Idea 
        join Idealist on Idea.idealist 
    )

    #API
    AddIdealistToAccountApi api[ secured(CLIENT, ADMIN)](
      create create[model Account, rest](

      )

    )
#    IdeaDto dto(
#      Idea.title
#      Idea.content
#      Tag.name
#    )

    TagApi api[ ](

      tags find[ from Tag, rest]
      
      byName find [ from Tag where Tag.name == name, rest]
    )

    IdeaApi api[ secured (CLIENT, ADMIN)](
      idea crud[model Idea, rest](
        title  
        content 
        tags optional list text
      )

      tag find[query Tag.findIdeaByTag, rest]
      ideas find[from Idea, rest]
      findById find[query Idea.findById , rest ]
    )

  )

  #CLIENT
  webApp client[
    template js-angular
    connectedTo ideapallo
    path /home
    home homePage
  ](

    IdeaUpdated event
    ViewTags event(name text)
    ViewIdea event(id integer)

    appPage page[path /](
      siteHeader container (
        osallistu link
        uusiIdea button{on click open createNewIdea}
        haku text
        hae button
        kuinkaPalveluToimii link
      )
      banner file[type image]

      placeholder

      createNewIdea form[submit IdeaApi.createIdea]{
        on success (close, fire IdeaUpdated)
      }

    )
    homePage appPage[path /home](
      seeIdeas link{on click goto ideasPage}
    )

    ideasPage appPage[path /ideas, secured(ADMIN, CLIENT)](
      ideas table[load IdeaApi.ideas](
        viewIdea link{on click fire ViewIdea(item.id)}
        viewIdeaX link{on click goto ideaPage( item.id) }
      ){
        on IdeaUpdated reload
      }

#      idea view[hidden, load IdeaApi.findById ]{
#        on ViewIdea (show,  reload(event.id))
#      }
    )

    ideaPage page[path /idea/:id, params(id integer)](
      ideaView view[load IdeaApi.readIdea ]{
        on ViewIdea( show,  reload(event.id)) 
      }
    )

    findByTag page[path /tag/:name/ideas, params(name text)](
      ideasByTags view[ bind params.name, load TagApi.byName ](
        
      )
    )

    allTags  page[path /tags, secured(ADMIN, CLIENT)](
      tags table[hidden, load TagApi.tags](
        viewTags link{on click fire ViewTags(item.name)}
      )
    )
  )
)
